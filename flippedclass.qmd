# How to Learn With This Course {.unnumbered}


## Session types

The topics in this course will be delivered in one of three ways: 

  1. Bootcamp
  2. Flipped classroom
  3. Online tutorial
  
Each type of class has a different emphasis and approach regardless of the topic under study. 

### Bootcamp

The bootcamp style class is an instructor led practical session. You will be expected to follow an instructor who is teaching and live coding from the front of the class. This is not a lecture where you take notes - its a computer class where you work concurrently with the instructor as they exemplify the skills you will need to learn to use. Much more like a cookery class than a university lecture, the session proceeds with the instructor demonstrating how to do a specific computer-based skill and you try it out immediately. It is very, _very_ useful to take the opportunity to read the materials for bootcamps _before_ the session. Learning from this style requires you to be alert and engaged with the material in the session, not least you should put effort into joining in and being part of the group. Be prepared to make mistakes and be at peace with not knowing yet and being on a journey of learning. Sitting back and hoping to catch up with it later in your own time will put you behind and waste the opportunity of the session.

### Flipped classroom

The 'flipped' classroom style here is one in which the reading is done by the student _before_ the session. This gives time for reflection and understanding of the concepts such that they can be applied to solve the problem sets that come up in the session. The instructor will _not_ conduct a comprehensive overview of the materials during the session, instead they will concentrate on issues arising in the application of the concepts. If you have not done the reading before the session then you will be behind from the start of the session and you will miss out on the opportunity. Learning from this style is requires you to lead and take responsibility for the learning before class and to work to apply the theoretical knowledge in the practical session. 

### Online tutorial

The most traditional style of session will be the online tutorial in which you will work through an online guide with embedded quizzes and questions on a particular topic. The materials will be provided in the session. Learning from this style of session requires you to be thinking through the questions and reasoning to work out the answers with the materials provided.


## Note-taking

The website of the course is connected to the online note-taking system [hypothes.is](https://hypothes.is/). If you have an account there and are logged in you'll be able to add highlights, notes and comments that you will see in the web page itself. You can also make and join groups to share notes.

## JONK

For all learning you should embrace JONK - 'Joy of Not Knowing' [@jonk]. Although you are at least a Post-Grad there are still a lot of things and skills to learn and you will spend a lot of time confused. This is fine. And expected, and a necessary part of learning - if it was easy you wouldn't be learning anything. Over and over again you'll fall into the metaphorical 'Learning Pit' [@pit] and through working at a problem sincerely with a view to understanding you'll reach real success - a good understanding of the topics you are learning about. 

```{r, fig.cap="Artwork from [James Nottingham -  https://www.challenginglearning.com](https://www.challenginglearning.com/learning-pit/)", echo=FALSE}
knitr::include_graphics("learningpit.jpg")
```


### The dark side 

Lots of people want to use data science and statistics so lots of other people publish blog posts and tutorials on those topics on the internet. A quick google will lead you to how-to's in briefer and shallower form than this course. Be wary of taking these as an answer, although they aren't wrong per se, the useful and particular ways of thinking about data science that this course is aimed at helping you understand are not so often developed in the quick online tutorials. They can help you with an immediate coding problem, it can take a very long time to develop broad and flexible understanding of data science through just looking stuff up on the internet and applying them until they seem to work. This dark side is quick, easy and seductive but won't bring you a good understanding. Take your time and work through the details and you'll emerge with a much more adaptable and applicable set of skills.

```{r, echo=FALSE}
knitr::include_graphics("darkside.jpg")
```


### Using ChatGPT and other 'bots

It is perfectly acceptable to use ChatGPT and other AI's to help you to work with code. AI's like that can't do 'thinking' but they can do 'parsing' so if you have a very specific question especially about syntax do feel free to use it. Remember that these sorts of tools are 'cliche machines' they generate an average answer, which isn't going to be helpful when you want to come up with an analysis strategy that is very tailored to an individual research question. It won't do a good job of telling you which test to use.

### The twin learning challenge

One difficult thing about learning to solve data questions with code is that you have to learn two things at the same time; how to solve the problem in code (how to program) and how to actually correctly write the code (learn the syntax of your chosen language). Its perfectly possible to get the first thing right and falter with the second, the second being incredibly easy to get wrong. Syntax in computer languages is incredibly picky and requires an eye for detail. One misplaced letter or punctuation mark and the code fails. In order to help with this it can be useful to learn how to use some tools to help with syntax. Here's a short list.

  1. *The Language Help System*
  
      Most languages have a help system, in R this is accessed in the 'help' pane of RStudio or by putting a `?` in front of a search term in the console, so `?print` will return entries in the help that have `print` in their title or description. (Note that `?how do I do a t-test` won't return much. It's a syntax based help, not a 'how to').
      
  2. *ChatGPT*
  
      This is a great tool for checking syntax of general stuff, these bots have a good internal description of the syntax of well discussed topics, so you can double check your code for syntax errors by pasting it into ChatGPT. It might struggle a bit with less used packages and certainly will give you poor advice on how to actually create your analysis.
  
  3. *Stack Overflow*
  
      A website for contributions on solving particular well-defined and specific (e.g 'how do I extract a column from a table') coding problems. If you have a problem with code then probably someone else has had the same issue asked about it and hopefully go an answer. Googling a coding problem will likely hit a Stack Overflow entry, so start with Google. 

## References